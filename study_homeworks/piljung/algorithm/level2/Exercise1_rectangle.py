'''
##################################################################################################################################################

1. <<멀쩡한 사각형>>

##문제 설명
가로 길이가 Wcm, 세로 길이가 Hcm인 직사각형 종이가 있습니다.
종이에는 가로, 세로 방향과 평행하게 격자 형태로 선이 그어져 있으며, 모든 격자칸은 1cm x 1cm 크기입니다.
이 종이를 격자 선을 따라 1cm × 1cm의 정사각형으로 잘라 사용할 예정이었는데, 누군가가 이 종이를 대각선 꼭지점 2개를 잇는 방향으로 잘라 놓았습니다.
그러므로 현재 직사각형 종이는 크기가 같은 직각삼각형 2개로 나누어진 상태입니다.
새로운 종이를 구할 수 없는 상태이기 때문에, 이 종이에서 원래 종이의 가로, 세로 방향과 평행하게 1cm × 1cm로 잘라 사용할 수 있는 만큼만 사용하기로 하였습니다.
가로의 길이 W와 세로의 길이 H가 주어질 때, 사용할 수 있는 정사각형의 개수를 구하는 solution 함수를 완성해 주세요.

##제한사항
W, H : 1억 이하의 자연수

##입출력 예 #1
가로가 8, 세로가 12인 직사각형을 대각선 방향으로 자르면 총 16개 정사각형을 사용할 수 없게 됩니다.
원래 직사각형에서는 96개의 정사각형을 만들 수 있었으므로, 96 - 16 = 80 을 반환합니다.

##################################################################################################################################################

## 최대 공약수 구하는 방법
#1) 유클리드 호제법 :
 두 수가 서로 상대방 수를 나누어서 결국 원하는 수를 얻는 알고리즘
 2개의 자연수(또는 정식) a, b에 대해서 a를 b로 나눈 나머지를 r이라 하면(단, a>b), a와 b의 최대공약수는 b와 r의 최대공약수와 같다.
 이 성질에 따라, b를 r로 나눈 나머지 r’를 구하고, 다시 r을 r’로 나눈 나머지를 구하는 과정을 반복하여 나머지가 0이 되었을 때 나누는 수가 a와 b의 최대공약수이다.

#2) 함께 나눠지는 최대공약수
  def gcd(a,b):
      gcd=1

      for k in range(2, min(a,b)+1):
          while (a % k == 0) & (b % k == 0):
               a=a//k #나누기 연산 후 소수점 이하의 수를 버리고, 정수 부분의 수만 구함
               b=b//k
               gcd=gcd*k
               continue
      return gcd

 '''
##내 풀이
def solution(w, h):
    if (w == h):
        answer = w ** 2 - w  # ** 제곱의 의미
    else:
        a = max(w, h)
        b = min(w, h)

        while b != 0:
            a, b = b, a % b

        gcd = a  # 유클리드 호제법으로 최대 공약수 구하기

        answer = w * h - (w + h - gcd)  # answer에 바로 쓰는게 런타임 애러남(왜일까??)

    return answer


## math라이브러리 사용
import math
def solution(w,h):
    if (w > h):
        w, h = h, w
    
    return w*h - (h + w - math.gcd(w,h))
